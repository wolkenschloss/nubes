import java.io.ByteArrayOutputStream
import java.nio.charset.StandardCharsets

plugins {
    java
}

repositories {
    mavenLocal()
    mavenCentral()
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(16))
    }
}

val gitDescribe by lazy {
    val stdout = ByteArrayOutputStream()
    rootProject.exec {
        workingDir(projectDir)
        commandLine("git", "describe", "--tags")
        standardOutput = stdout
    }

    stdout.toString(StandardCharsets.UTF_8).trim()
}

val gitBranch by lazy {
    val stdout = ByteArrayOutputStream()
    rootProject.exec {
        workingDir(projectDir)
        commandLine("git", "branch", "--show-current")
        standardOutput = stdout
    }

    stdout.toString(StandardCharsets.UTF_8).trim()
}

val gitSha by lazy {
    val stdout = ByteArrayOutputStream()
    rootProject.exec {
        workingDir(projectDir)
        commandLine("git", "rev-parse", "HEAD")
        standardOutput = stdout
    }

    stdout.toString(StandardCharsets.UTF_8).trim()
}

fun getenv(name: String, default: () -> String): String {
    return System.getenv(name) ?: default()
};

tasks {
    val projectProperties by registering(WriteProperties::class) {
        group = "other"
        description = "Write project properties in a file."
        outputFile = file("${buildDir}/project.properties")
        encoding = "UTF-8"
        comment = "generated by wolkenschloss.conventions.java.gradle.kts"

        properties(mapOf(
                "project.name" to project.name,
                "project.group" to project.group,
                "project.version" to project.version,
                "project.sha" to getenv("GITHUB_SHA") { gitSha },
                "project.ref" to getenv("GITHUB_REF") { gitBranch }
        ))
    }

    processResources {
        from(projectProperties)
    }
}
