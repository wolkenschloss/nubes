#cloud-config

preserve_hostname: False
hostname: ${hostname.get()}
fqdn: ${fqdn.get()}
manage_etc_hosts: True

ssh_pwauth: False

groups:
  - microk8s
  - docker

users:
  - name: ubuntu
    shell: '/bin/bash'
    groups:
      - sudo
      - microk8s
      - docker
    sudo: 'ALL=(ALL) NOPASSWD: ALL'

locale: ${locale.get()}

package_update: True
package_upgrade: True

packages:
  - acpid
  - tzdata
  - curl
  - jq
#  - docker.io

ca_certs:
  trusted: |
${certificate.get().split('\n').collect { ' ' * 5 + it }.join('\n')}
write_files:
  - path: /etc/testbed/kustomization.yaml
    content: |
      resources:
        - coredns-config.yaml
        - https://github.com/jetstack/cert-manager/releases/download/${cert_manager_version.get()}/cert-manager.yaml
  - path: /etc/testbed/coredns-config.yaml
    content: |
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: coredns
        namespace: kube-system
      data:
        Corefile: |
          .:53 {
              errors
              health {
                  lameduck 5s
              }
              ready
              kubernetes cluster.local in-addr.arpa ip6.arpa {
                  pods insecure
                  fallthrough in-addr.arpa ip6.arpa
                  ttl 30
              }
              hosts {
                10.0.1.1 ${hosts.get()}
                fallthrough
              }    
              prometheus :9153
              forward . 8.8.8.8
              cache 30
              loop
              reload
              loadbalance
          }
  - path: /etc/cloud/templates/hosts.debian.tmpl
    content: |
      ## template:jinja
      127.0.1.1 {{fqdn}} {{hostname}}
      127.0.0.1 localhost
      10.0.1.1 ${hosts.get()}
      ::1 localhost ip6-localhost ip6-loopback
      ff02::1 ip6-allnodes
      ff02::2 ip6-allrouters

snap:
  commands:
    01: snap install microk8s --classic
    02: snap install kubectl --classic
    03: microk8s enable dns storage ingress dashboard registry host-access
    04: microk8s status --wait-ready
    05: microk8s.kubectl apply -k /etc/testbed
    06: microk8s kubectl rollout restart -n kube-system deployment/coredns
    07: microk8s kubectl rollout status deployment/registry --timeout=240s -n container-registry

runcmd:
  - ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf
  - cd /tmp
  - curl -L -o cmctl.tar.gz https://github.com/jetstack/cert-manager/releases/latest/download/cmctl-linux-amd64.tar.gz
  - tar xzf cmctl.tar.gz
  - install cmctl /usr/local/bin
  - export KUBECONFIG=/var/snap/microk8s/current/credentials/client.config
  - cmctl check api --wait=10m
  - sudo -u ubuntu mkdir -p /home/ubuntu/.kube
  - sudo -u ubuntu `microk8s config > /home/ubuntu/.kube/config`
  - microk8s enable linkerd
  - microk8s linkerd viz install | microk8s kubectl apply -f -


